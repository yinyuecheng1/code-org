import React from 'react';
import { AppLoading } from 'expo';
import { AsyncStorage, Platform, StyleSheet, View, WebView } from 'react-native';

import CustomAsset from './CustomAsset';
import DataWarning from './DataWarning';
import packagedFiles from './packagedFiles';

export default class App extends React.Component {

  static APP_HEIGHT = <%- appHeight %>;
  static APP_WIDTH = <%- appWidth %>;

  constructor(props) {
    super(props);
    this.state = {
<% if (!hasDataAPIs) { -%>
      age: DataWarning.AGE_MINIMUM,
<% } -%>
    };
  }

  componentDidMount() {
    this.prepareAssets();
    this.checkAge();
  }

<% if (hasDataAPIs) { -%>
  checkAge = async () => {
    try {
      const age = await AsyncStorage.getItem(DataWarning.AGE_KEY);
      this.setState({ age });
    } catch (e) {
    }
  };
<% } else { -%>
  checkAge = () => {};
<% } -%>

  async prepareAssets() {
    const downloadAssets = packagedFiles.map(({ module, fileName }) =>
      CustomAsset.fromModule(module, fileName)
    );
    await CustomAsset.loadAsyncAssets(downloadAssets);
    const indexHtmlIndex = packagedFiles.findIndex(({ fileName }) => fileName === 'index.html');
    this.setState({
      indexUri: downloadAssets[indexHtmlIndex].localUri,
    });
  }

  onLayout = ({ nativeEvent }) => {
    const { height, width } = nativeEvent.layout;
    this.setState({
      height,
      width,
    });
  };

  webViewScale() {
    const { height, width } = this.state;

    const heightScale = height / App.APP_HEIGHT;
    const widthScale = width / App.APP_WIDTH;
    return Math.min(heightScale, widthScale);
  }

  webViewContainerStyle() {
    const scale = this.webViewScale();

    return {
      height: App.APP_HEIGHT * scale,
      width: App.APP_WIDTH * scale,
    };
  }

  render() {
    const { age, height, indexUri } = this.state;

    if (!age || age < DataWarning.AGE_MINIMUM) {
      return (
        <DataWarning onComplete={this.checkAge} />
      );
    }

    if (!indexUri) {
      return (
        <AppLoading />
      );
    }

    return (
      <View onLayout={this.onLayout} style={styles.container}>
        {height && <View style={this.webViewContainerStyle()}>
          <WebView
            source={{uri: indexUri}}
            style={styles.webView}
            javaScriptEnabled={true}
            scrollEnabled={false}
            bounces={false}
            scalesPageToFit={Platform.OS === 'ios'}
          />
        </View>}
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    ...StyleSheet.absoluteFillObject,
    backgroundColor: 'black',
    justifyContent: 'center',
  },
  webView: {
    backgroundColor: 'black',
    flex: 1,
  }
});
